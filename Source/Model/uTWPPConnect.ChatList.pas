unit uTWPPConnect.ChatList;

// *************************************************
// Generated By: JsonToDelphiClass - 0.65
// Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
// Generated On: 2022-10-27 21:17:49
// *************************************************
// Created By  : Petar Georgiev - 2014
// WebSite     : http://pgeorgiev.com
// *************************************************

interface

uses Generics.Collections, Rest.Json, uTWPPConnect.Classes,
  uTWPPConnect.Constant;

type

  TIdClass = class(TClassPadrao)
  private
    F_serialized: String;
    FFromMe: Boolean;
    FId: String;
    FRemote: String;
  public
    property _serialized: String read F_serialized write F_serialized;
    property fromMe: Boolean read FFromMe write FFromMe;
    property id: String read FId write FId;
    property remote: String read FRemote write FRemote;
  end;

  TMsgsClass = class(TClassPadrao)
  private
    FAck: Extended;
    FBody: String;
    FBroadcast: Boolean;
    FEphemeralOutOfSync: Boolean;
    FFrom: String;
    FHasReaction: Boolean;
    FId: TIdClass;
    FIsAvatar: Boolean;
    FIsDynamicReplyButtonsMsg: Boolean;
    FIsForwarded: Boolean;
    FIsFromTemplate: Boolean;
    FIsMdHistoryMsg: Boolean;
    FIsNewMsg: Boolean;
    FIsVcardOverMmsDocument: Boolean;
    FKicNotified: Boolean;
    FLabels: TArray<String>;
    FLastPlaybackProgress: Extended;
    FMentionedJidList: TArray<String>;
    FNotifyName: String;
    FPollInvalidated: Boolean;
    FProductHeaderImageRejected: Boolean;
    FPttForwardedFeaturesEnabled: Boolean;
    FRecvFresh: Boolean;
    FRequiresDirectConnection: Boolean;
    FSelf: String;
    FStar: Boolean;
    FStickerSentTs: Extended;
    FT: Extended;
    FTo: String;
    FType: String;
  public
    property ack: Extended read FAck write FAck;
    property body: String read FBody write FBody;
    property broadcast: Boolean read FBroadcast write FBroadcast;
    property ephemeralOutOfSync: Boolean read FEphemeralOutOfSync
      write FEphemeralOutOfSync;
    property from: String read FFrom write FFrom;
    property hasReaction: Boolean read FHasReaction write FHasReaction;
    property id: TIdClass read FId write FId;
    property isAvatar: Boolean read FIsAvatar write FIsAvatar;
    property isDynamicReplyButtonsMsg: Boolean read FIsDynamicReplyButtonsMsg
      write FIsDynamicReplyButtonsMsg;
    property isForwarded: Boolean read FIsForwarded write FIsForwarded;
    property isFromTemplate: Boolean read FIsFromTemplate write FIsFromTemplate;
    property isMdHistoryMsg: Boolean read FIsMdHistoryMsg write FIsMdHistoryMsg;
    property isNewMsg: Boolean read FIsNewMsg write FIsNewMsg;
    property isVcardOverMmsDocument: Boolean read FIsVcardOverMmsDocument
      write FIsVcardOverMmsDocument;
    property kicNotified: Boolean read FKicNotified write FKicNotified;
    property labels: TArray<String> read FLabels write FLabels;
    property lastPlaybackProgress: Extended read FLastPlaybackProgress
      write FLastPlaybackProgress;
    property mentionedJidList: TArray<String> read FMentionedJidList
      write FMentionedJidList;
    property notifyName: String read FNotifyName write FNotifyName;
    property pollInvalidated: Boolean read FPollInvalidated
      write FPollInvalidated;
    property productHeaderImageRejected: Boolean
      read FProductHeaderImageRejected write FProductHeaderImageRejected;
    property pttForwardedFeaturesEnabled: Boolean
      read FPttForwardedFeaturesEnabled write FPttForwardedFeaturesEnabled;
    property recvFresh: Boolean read FRecvFresh write FRecvFresh;
    property requiresDirectConnection: Boolean read FRequiresDirectConnection
      write FRequiresDirectConnection;
    property self: String read FSelf write FSelf;
    property star: Boolean read FStar write FStar;
    property stickerSentTs: Extended read FStickerSentTs write FStickerSentTs;
    property t: Extended read FT write FT;
    property &to: String read FTo write FTo;
    property &type: String read FType write FType;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

  TTcTokenClass = class(TClassPadrao)
  private
  public

  end;

  TLastReceivedKeyClass = class(TClassPadrao)
  private
    F_serialized: String;
    FFromMe: Boolean;
    FId: String;
    FRemote: String;
  public
    property _serialized: String read F_serialized write F_serialized;
    property fromMe: Boolean read FFromMe write FFromMe;
    property id: String read FId write FId;
    property remote: String read FRemote write FRemote;
  end;

  TChatListClass = class(TClassPadrao)
  private
    FArchiveAtMentionViewedInDrawer: Boolean;
    FDisappearingModeInitiator: String;
    FEndOfHistoryTransferType: Extended;
    FEphemeralDuration: Extended;
    FHasChatBeenOpened: Boolean;
    FHasUnreadMention: Boolean;
    FId: String;
    FIsAutoMuted: Boolean;
    FIsReadOnly: Boolean;
    FLabels: TArray<String>;
    FLastReceivedKey: TLastReceivedKeyClass;
    FMsgs: TArray<TMsgsClass>;
    FMuteExpiration: Extended;
    FNotSpam: Boolean;
    FPendingInitialLoading: Boolean;
    FPendingMsgs: Boolean;
    FT: Extended;
    FTcToken: TTcTokenClass;
    FTcTokenTimestamp: Extended;
    FUnreadCount: Extended;
    FUnreadMentionCount: Extended;
    FUnreadMentionsOfMe: TArray<String>;
  public
    property archiveAtMentionViewedInDrawer: Boolean
      read FArchiveAtMentionViewedInDrawer
      write FArchiveAtMentionViewedInDrawer;
    property disappearingModeInitiator: String read FDisappearingModeInitiator
      write FDisappearingModeInitiator;
    property endOfHistoryTransferType: Extended read FEndOfHistoryTransferType
      write FEndOfHistoryTransferType;
    property ephemeralDuration: Extended read FEphemeralDuration
      write FEphemeralDuration;
    property hasChatBeenOpened: Boolean read FHasChatBeenOpened
      write FHasChatBeenOpened;
    property hasUnreadMention: Boolean read FHasUnreadMention
      write FHasUnreadMention;
    property id: String read FId write FId;
    property isAutoMuted: Boolean read FIsAutoMuted write FIsAutoMuted;
    property isReadOnly: Boolean read FIsReadOnly write FIsReadOnly;
    property labels: TArray<String> read FLabels write FLabels;
    property lastReceivedKey: TLastReceivedKeyClass read FLastReceivedKey
      write FLastReceivedKey;
    property msgs: TArray<TMsgsClass> read FMsgs write FMsgs;
    property muteExpiration: Extended read FMuteExpiration
      write FMuteExpiration;
    property notSpam: Boolean read FNotSpam write FNotSpam;
    property pendingInitialLoading: Boolean read FPendingInitialLoading
      write FPendingInitialLoading;
    property pendingMsgs: Boolean read FPendingMsgs write FPendingMsgs;
    property t: Extended read FT write FT;
    property tcToken: TTcTokenClass read FTcToken write FTcToken;
    property tcTokenTimestamp: Extended read FTcTokenTimestamp
      write FTcTokenTimestamp;
    property unreadCount: Extended read FUnreadCount write FUnreadCount;
    property unreadMentionCount: Extended read FUnreadMentionCount
      write FUnreadMentionCount;
    property unreadMentionsOfMe: TArray<String> read FUnreadMentionsOfMe
      write FUnreadMentionsOfMe;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

  TGetChatList = class(TClassPadraoList<TChatListClass>)
  private
    FName: String;
    FResult: TArray<TChatListClass>;
  public
    property name: String read FName write FName;
    property result: TArray<TChatListClass> read FResult write FResult;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

implementation

{ TRootClass }

{ TChatsList }

constructor TGetChatList.Create(pAJsonString: string);
begin
  inherited Create(pAJsonString);
end;

destructor TGetChatList.Destroy;
begin

  inherited;
end;

{ TMsgsClass }

constructor TMsgsClass.Create(pAJsonString: string);
begin
  inherited Create(pAJsonString);
  FId := TIdClass.Create(pAJsonString);
end;

destructor TMsgsClass.Destroy;
begin
  FId.free;
  inherited;
end;

{ TChatClass }

constructor TChatListClass.Create(pAJsonString: string);
begin
  inherited Create(pAJsonString);
  FLastReceivedKey := TLastReceivedKeyClass.Create(pAJsonString);
  FTcToken := TTcTokenClass.Create(pAJsonString);
end;

destructor TChatListClass.Destroy;
var
  LmsgsItem: TMsgsClass;
begin
  for LmsgsItem in FMsgs do
    LmsgsItem.free;

  FLastReceivedKey.free;
  FTcToken.free;
  inherited;
end;


end.
