unit uTWPPConnect.ChatList;

// *************************************************
// Generated By: JsonToDelphiClass - 0.65
// Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
// Generated On: 2022-10-27 21:17:49
// *************************************************
// Created By  : Petar Georgiev - 2014
// WebSite     : http://pgeorgiev.com
// *************************************************

interface

uses Generics.Collections, Rest.Json, uTWPPConnect.Classes,
  uTWPPConnect.Constant;

type

  TSenderObjClass = class(TClassPadrao)
  private
    FId: String;
    FIsBusiness: Boolean;
    FIsContactSyncCompleted: Extended;
    FIsEnterprise: Boolean;
    FLabels: TArray<String>;
    FName: String;
    FPushname: String;
    FShortName: String;
    FType: String;
  public
    property id: String read FId write FId;
    property isBusiness: Boolean read FIsBusiness write FIsBusiness;
    property isContactSyncCompleted: Extended read FIsContactSyncCompleted
      write FIsContactSyncCompleted;
    property isEnterprise: Boolean read FIsEnterprise write FIsEnterprise;
    property labels: TArray<String> read FLabels write FLabels;
    property name: String read FName write FName;
    property pushname: String read FPushname write FPushname;
    property shortName: String read FShortName write FShortName;
    property &type: String read FType write FType;
  end;

  TIdClassMsgChunk = class(TClassPadrao)
  private
    F_serialized: String;
    FFromMe: Boolean;
    FId: String;
    FRemote: String;
  public
    property _serialized: String read F_serialized write F_serialized;
    property fromMe: Boolean read FFromMe write FFromMe;
    property id: String read FId write FId;
    property remote: String read FRemote write FRemote;
  end;

  TMsgChunkClass = class(TClassPadrao)
  private
    FAck: Extended;
    FBody: String;
    FBroadcast: Boolean;
    FEphemeralOutOfSync: Boolean;
    FFrom: String;
    FHasReaction: Boolean;
    FId: TIdClassMsgChunk;
    FIsAvatar: Boolean;
    FIsDynamicReplyButtonsMsg: Boolean;
    FIsForwarded: Boolean;
    FIsFromTemplate: Boolean;
    FIsMdHistoryMsg: Boolean;
    FIsNewMsg: Boolean;
    FIsVcardOverMmsDocument: Boolean;
    FKicNotified: Boolean;
    FLabels: TArray<String>;
    FLastPlaybackProgress: Extended;
    FMentionedJidList: TArray<String>;
    FNotifyName: String;
    FPollInvalidated: Boolean;
    FProductHeaderImageRejected: Boolean;
    FPttForwardedFeaturesEnabled: Boolean;
    FRecvFresh: Boolean;
    FRequiresDirectConnection: Boolean;
    FSelf: String;
    FStar: Boolean;
    FStickerSentTs: Extended;
    FT: Extended;
    FTo: String;
    FType: String;
  public
    property ack: Extended read FAck write FAck;
    property body: String read FBody write FBody;
    property broadcast: Boolean read FBroadcast write FBroadcast;
    property ephemeralOutOfSync: Boolean read FEphemeralOutOfSync
      write FEphemeralOutOfSync;
    property from: String read FFrom write FFrom;
    property hasReaction: Boolean read FHasReaction write FHasReaction;
    property id: TIdClassMsgChunk read FId write FId;
    property isAvatar: Boolean read FIsAvatar write FIsAvatar;
    property isDynamicReplyButtonsMsg: Boolean read FIsDynamicReplyButtonsMsg
      write FIsDynamicReplyButtonsMsg;
    property isForwarded: Boolean read FIsForwarded write FIsForwarded;
    property isFromTemplate: Boolean read FIsFromTemplate write FIsFromTemplate;
    property isMdHistoryMsg: Boolean read FIsMdHistoryMsg write FIsMdHistoryMsg;
    property isNewMsg: Boolean read FIsNewMsg write FIsNewMsg;
    property isVcardOverMmsDocument: Boolean read FIsVcardOverMmsDocument
      write FIsVcardOverMmsDocument;
    property kicNotified: Boolean read FKicNotified write FKicNotified;
    property labels: TArray<String> read FLabels write FLabels;
    property lastPlaybackProgress: Extended read FLastPlaybackProgress
      write FLastPlaybackProgress;
    property mentionedJidList: TArray<String> read FMentionedJidList
      write FMentionedJidList;
    property notifyName: String read FNotifyName write FNotifyName;
    property pollInvalidated: Boolean read FPollInvalidated
      write FPollInvalidated;
    property productHeaderImageRejected: Boolean
      read FProductHeaderImageRejected write FProductHeaderImageRejected;
    property pttForwardedFeaturesEnabled: Boolean
      read FPttForwardedFeaturesEnabled write FPttForwardedFeaturesEnabled;
    property recvFresh: Boolean read FRecvFresh write FRecvFresh;
    property requiresDirectConnection: Boolean read FRequiresDirectConnection
      write FRequiresDirectConnection;
    property self: String read FSelf write FSelf;
    property star: Boolean read FStar write FStar;
    property stickerSentTs: Extended read FStickerSentTs write FStickerSentTs;
    property &t: Extended read FT write FT;
    property &to : String read FTo write FTo;
    property &type: String read FType write FType;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

  TIdClass = class(TClassPadrao)
  private
    F_serialized: String;
    FFromMe: Boolean;
    FId: String;
    FRemote: String;
  public
    property _serialized: String read F_serialized write F_serialized;
    property fromMe: Boolean read FFromMe write FFromMe;
    property id: String read FId write FId;
    property remote: String read FRemote write FRemote;
  end;

  TChatListClass = class(TClassPadrao)
  private
    F_footerLinks: TArray<String>;
    F_footerPhoneNumbers: TArray<String>;
    F_headerLinks: TArray<String>;
    F_headerPhoneNumbers: TArray<String>;
    F_links: TArray<String>;
    F_phoneNumbers: TArray<String>;
    FAck: Extended;
    FBody: String;
    FBroadcast: Boolean;
    FEphemeralOutOfSync: Boolean;
    FForwardedFromWeb: Boolean;
    FFrom: String;
    FHasReaction: Boolean;
    FId: TIdClass;
    FIsAvatar: Boolean;
    FIsDynamicReplyButtonsMsg: Boolean;
    FIsForwarded: Boolean;
    FIsFromTemplate: Boolean;
    FIsMdHistoryMsg: Boolean;
    FIsNewMsg: Boolean;
    FIsQuotedMsgAvailable: Boolean;
    FIsVcardOverMmsDocument: Boolean;
    FKicNotified: Boolean;
    FLabels: TArray<String>;
    FLastPlaybackProgress: Extended;
    FLinksIndexParsed: Extended;
    FLocal: Boolean;
    FMentionedJidList: TArray<String>;
    FMsgChunk: TArray<TMsgChunkClass>;
    FNotifyName: String;
    FPendingDeleteForMe: Boolean;
    FPhoneNumbersIndexParsed: Extended;
    FPollInvalidated: Boolean;
    FProductHeaderImageRejected: Boolean;
    FPttForwardedFeaturesEnabled: Boolean;
    FRecvFresh: Boolean;
    FRequiresDirectConnection: Boolean;
    FSelf: String;
    FSenderObj: TSenderObjClass;
    FStale: Boolean;
    FStar: Boolean;
    FStickerSentTs: Extended;
    FT: Extended;
    FTo: String;
    FType: String;
  public
    property _footerLinks: TArray<String> read F_footerLinks
      write F_footerLinks;
    property _footerPhoneNumbers: TArray<String> read F_footerPhoneNumbers
      write F_footerPhoneNumbers;
    property _headerLinks: TArray<String> read F_headerLinks
      write F_headerLinks;
    property _headerPhoneNumbers: TArray<String> read F_headerPhoneNumbers
      write F_headerPhoneNumbers;
    property _links: TArray<String> read F_links write F_links;
    property _phoneNumbers: TArray<String> read F_phoneNumbers
      write F_phoneNumbers;
    property ack: Extended read FAck write FAck;
    property body: String read FBody write FBody;
    property broadcast: Boolean read FBroadcast write FBroadcast;
    property ephemeralOutOfSync: Boolean read FEphemeralOutOfSync
      write FEphemeralOutOfSync;
    property forwardedFromWeb: Boolean read FForwardedFromWeb
      write FForwardedFromWeb;
    property from: String read FFrom write FFrom;
    property hasReaction: Boolean read FHasReaction write FHasReaction;
    property id: TIdClass read FId write FId;
    property isAvatar: Boolean read FIsAvatar write FIsAvatar;
    property isDynamicReplyButtonsMsg: Boolean read FIsDynamicReplyButtonsMsg
      write FIsDynamicReplyButtonsMsg;
    property isForwarded: Boolean read FIsForwarded write FIsForwarded;
    property isFromTemplate: Boolean read FIsFromTemplate write FIsFromTemplate;
    property isMdHistoryMsg: Boolean read FIsMdHistoryMsg write FIsMdHistoryMsg;
    property isNewMsg: Boolean read FIsNewMsg write FIsNewMsg;
    property isQuotedMsgAvailable: Boolean read FIsQuotedMsgAvailable
      write FIsQuotedMsgAvailable;
    property isVcardOverMmsDocument: Boolean read FIsVcardOverMmsDocument
      write FIsVcardOverMmsDocument;
    property kicNotified: Boolean read FKicNotified write FKicNotified;
    property labels: TArray<String> read FLabels write FLabels;
    property lastPlaybackProgress: Extended read FLastPlaybackProgress
      write FLastPlaybackProgress;
    property linksIndexParsed: Extended read FLinksIndexParsed
      write FLinksIndexParsed;
    property local: Boolean read FLocal write FLocal;
    property mentionedJidList: TArray<String> read FMentionedJidList
      write FMentionedJidList;
    property msgChunk: TArray<TMsgChunkClass> read FMsgChunk write FMsgChunk;
    property notifyName: String read FNotifyName write FNotifyName;
    property pendingDeleteForMe: Boolean read FPendingDeleteForMe
      write FPendingDeleteForMe;
    property phoneNumbersIndexParsed: Extended read FPhoneNumbersIndexParsed
      write FPhoneNumbersIndexParsed;
    property pollInvalidated: Boolean read FPollInvalidated
      write FPollInvalidated;
    property productHeaderImageRejected: Boolean
      read FProductHeaderImageRejected write FProductHeaderImageRejected;
    property pttForwardedFeaturesEnabled: Boolean
      read FPttForwardedFeaturesEnabled write FPttForwardedFeaturesEnabled;
    property recvFresh: Boolean read FRecvFresh write FRecvFresh;
    property requiresDirectConnection: Boolean read FRequiresDirectConnection
      write FRequiresDirectConnection;
    property self: String read FSelf write FSelf;
    property senderObj: TSenderObjClass read FSenderObj write FSenderObj;
    property stale: Boolean read FStale write FStale;
    property star: Boolean read FStar write FStar;
    property stickerSentTs: Extended read FStickerSentTs write FStickerSentTs;
    property t: Extended read FT write FT;
    property &to: String read FTo write FTo;
    property &type: String read FType write FType;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

  TGetChatList = class(TClassPadraoList<TChatListClass>)
  private
    FName: String;
    FResult: TArray<TChatListClass>;
  public
    property name: String read FName write FName;
    property result: TArray<TChatListClass> read FResult write FResult;
    constructor Create(pAJsonString: string);
    destructor Destroy; override;
  end;

implementation

{ TRootClass }

{ TChatsList }

constructor TGetChatList.Create(pAJsonString: string);
begin
  inherited Create(pAJsonString);
end;

destructor TGetChatList.Destroy;
begin

  inherited;
end;

{ TChatClass }

constructor TChatListClass.Create(pAJsonString: string);
begin
  inherited Create(pAJsonString);
  FId := TIdClass.Create(pAJsonString);
  FSenderObj := TSenderObjClass.Create(pAJsonString);
end;

destructor TChatListClass.Destroy;
var
  LmsgChunkItem: TMsgChunkClass;
begin

  for LmsgChunkItem in FMsgChunk do
    LmsgChunkItem.free;

  FId.free;
  FSenderObj.free;
  inherited;
end;

{ TMsgChunkClass }

constructor TMsgChunkClass.Create(pAJsonString: string);
begin
  FId := TIdClassMsgChunk.Create(pAJsonString);
end;

destructor TMsgChunkClass.Destroy;
begin
  FId.free;
  inherited;
end;

end.
